within PL_Lib;

package HRB "Heat recovery boiler models"
  extends Modelica.Icons.ExamplesPackage;

  package Models
    extends Modelica.Icons.Library;

    model HeatExchanger "Base class for heat exchanger fluid - gas"
      constant Real pi = Modelica.Constants.pi;
      replaceable package GasMedium = Modelica.Media.IdealGases.MixtureGases.CombustionAir constrainedby Modelica.Media.Interfaces.PartialMedium;
      replaceable package WaterMedium = Water.StandardWater constrainedby Modelica.Media.Interfaces.PartialMedium;
      parameter Boolean StaticGasBalances = false;
      parameter Integer Nr = 2 "Number of tube rows";
      parameter Integer Nt = 2 "Number of parallel tubes in each row";
      parameter SI.Length Lt "Length of a tube in a row";
      parameter SI.Length Dint "Internal diameter of each tube";
      parameter SI.Length Dext "External diameter of each tube";
      parameter SI.Density rhom "Density of the tube metal walls";
      parameter SI.SpecificHeatCapacity cm "Specific heat capacity of the tube metal walls";
      parameter SI.Area Sb "Cross-section of the boiler (including tubes)";
      final parameter SI.Area Sb_net = Sb - Nr * Nt * Dext * pi * Lt "Net cross-section of the boiler";
      parameter SI.Length Lb "Length of the boiler";
      parameter SI.Area St = Dext * pi * Lt * Nt * Nr "Total area of the heat exchange surface";
      parameter SI.CoefficientOfHeatTransfer gamma_nom = 150 "Nominal heat transfer coefficient - gas side";
      Gas.FlangeA gasIn(redeclare package Medium = GasMedium) annotation(
        Placement(transformation(extent = {{-120, -20}, {-80, 20}}, rotation = 0)));
      Gas.FlangeB gasOut(redeclare package Medium = GasMedium) annotation(
        Placement(transformation(extent = {{80, -20}, {120, 20}}, rotation = 0)));
      Water.FlangeA waterIn(redeclare package Medium = WaterMedium) annotation(
        Placement(transformation(extent = {{-20, 80}, {20, 120}}, rotation = 0)));
      Water.FlangeB waterOut(redeclare package Medium = WaterMedium) annotation(
        Placement(transformation(extent = {{-20, -120}, {20, -80}}, rotation = 0)));
      Water.Flow1DFV WaterSide(redeclare package Medium = WaterMedium, Nt = Nt, A = pi * Dint ^ 2 / 4, omega = pi * Dint, Dhyd = Dint, wnom = 20, Cfnom = 0.005, L = Lt * Nr, N = Nr + 1, hstartin = 1e5, hstartout = 2.7e5, FFtype = ThermoPower.Choices.Flow1D.FFtypes.Cfnom, redeclare model HeatTransfer = ThermoPower.Thermal.HeatTransferFV.DittusBoelter, dpnom = 1000) annotation(
        Placement(transformation(extent = {{-20, -70}, {20, -30}}, rotation = 0)));
      Thermal.MetalTubeFV TubeWalls(L = Lt * Nr, Nw = Nr, Tstart1(displayUnit = "K") = 300, TstartN(displayUnit = "K") = 340, lambda = 20, rext = Dext / 2, rhomcm = rhom * cm, rint = Dint / 2) "Tube" annotation(
        Placement(transformation(extent = {{-20, 0}, {20, -40}}, rotation = 0)));
      Gas.Flow1DFV GasSide(redeclare package Medium = GasMedium, L = Lb, omega = St / Lb, wnom = 10, A = Sb, Dhyd = St / Lb, N = Nr + 1, FFtype = ThermoPower.Choices.Flow1D.FFtypes.NoFriction, QuasiStatic = StaticGasBalances, redeclare model HeatTransfer = ThermoPower.Thermal.HeatTransferFV.FlowDependentHeatTransferCoefficient(gamma_nom = gamma_nom, alpha = 0.6), Tstartin = 670, Tstartout = 370) annotation(
        Placement(transformation(extent = {{-20, 60}, {20, 20}}, rotation = 0)));
      Thermal.CounterCurrentFV CounterCurrent1(Nw = Nr) annotation(
        Placement(transformation(extent = {{-20, -8}, {20, 32}}, rotation = 0)));
    equation
      connect(CounterCurrent1.side2, TubeWalls.ext) annotation(
        Line(points = {{0, 5.8}, {0, 5.8}, {0, -13.8}}, color = {255, 127, 0}));
      connect(GasSide.infl, gasIn) annotation(
        Line(points = {{-20, 40}, {-60, 40}, {-60, 0}, {-100, 0}}, color = {159, 159, 223}, thickness = 0.5));
      connect(GasSide.outfl, gasOut) annotation(
        Line(points = {{20, 40}, {60, 40}, {60, 0}, {100, 0}}, color = {159, 159, 223}, thickness = 0.5));
      connect(WaterSide.outfl, waterOut) annotation(
        Line(points = {{20, -50}, {40, -50}, {40, -70}, {0, -70}, {0, -100}}, thickness = 0.5, color = {0, 0, 255}));
      connect(WaterSide.infl, waterIn) annotation(
        Line(points = {{-20, -50}, {-40, -50}, {-40, 70}, {0, 70}, {0, 100}}, thickness = 0.5, color = {0, 0, 255}));
      connect(GasSide.wall, CounterCurrent1.side1) annotation(
        Line(points = {{0, 30}, {0, 18}}, color = {255, 127, 0}, smooth = Smooth.None));
      connect(TubeWalls.int, WaterSide.wall) annotation(
        Line(points = {{0, -26}, {0, -40}}, color = {255, 127, 0}, smooth = Smooth.None));
      annotation(
        Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics),
        Icon(graphics = {Rectangle(lineColor = {0, 0, 255}, fillColor = {230, 230, 230}, fillPattern = FillPattern.Solid, extent = {{-100, 100}, {100, -100}}), Line(points = {{0, -80}, {0, -40}, {40, -20}, {-40, 20}, {0, 40}, {0, 80}}, color = {0, 0, 255}, thickness = 0.5), Text(lineColor = {85, 170, 255}, extent = {{-100, -115}, {100, -145}}, textString = "%name")}),
        Documentation(revisions = "<html>
<ul>
<li><i>12 Dec 2008</i>
    by <a>Luca Savoldelli</a>:<br>
       Model restructured.</li>
<li><i>20 Dec 2004</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>", info = "<html>
This is the model of a very simple heat exchanger. The modelling assumptions are as follows:
<ul>
<li> The boiler contains <tt>Nr</tt> rows of tubes, connected in series; each one is made of <tt>Nt</tt> identical tubes in parallel. 
<li>Each tube has a length <tt>L</tt>, internal and external diameters <tt>Dint</tt> and <tt>Dext</tt>, and is made of a metal having density <tt>rhom</tt> and a specific heat capacity of <tt>cm</tt>. 
<li>The series connection of the tubes is discretised with <tt>Nr+1</tt> nodes, so that each cell between two nodes corresponds to a single row.
<li>The gas flow is also discretised with <tt>Nr+1</tt> nodes, so that each gas cell interacts with a single tube row. 
<li>The gas flows through a volume having a (net) cross-section <tt>Sb</tt> and a (net) length <tt>Lb</tt>. 
<li>Mass and energy dynamic balances are assumed for the water side.
<li>The mass and energy balances for the gas side are either static or dynamic, depending on the value of the <tt>StaticGasBalances</tt> parameter.
<li>The fluid in the water side remains liquid throughout the boiler.
<li>The heat transfer coefficient on the water side is computed by Dittus-Boelter's correlation.
<li>The external heat transfer coefficient is computed according to the simple law declared <tt>Flow1DGasHT</tt>. To change that correlation, it is only necessary to change equations in that model.
</ul>
</html>"));
    end HeatExchanger;

    model Evaporator "Fire tube boiler, fixed heat transfer coefficient, no radiative heat transfer"
      replaceable package FlueGasMedium = ThermoPower.Media.FlueGas constrainedby Modelica.Media.Interfaces.PartialMedium "Flue gas model";
      replaceable package FluidMedium = ThermoPower.Water.StandardWater constrainedby Modelica.Media.Interfaces.PartialPureSubstance "Fluid model";
      parameter Integer N = 2 "Number of node of the gas side";
      //Nominal parameter
      parameter SI.MassFlowRate gasNomFlowRate "Nominal flow rate through the gas side";
      parameter SI.MassFlowRate fluidNomFlowRate "Nominal flow rate through the fluid side";
      parameter SI.Pressure gasNomPressure "Nominal pressure in the gas side inlet";
      parameter SI.Pressure fluidNomPressure "Nominal pressure in the fluid side inlet";
      //Physical Parameter
      parameter SI.Area exchSurface "Exchange surface between gas - metal tube";
      parameter SI.Volume gasVol "Gas volume";
      parameter SI.Volume fluidVol "Fluid volume";
      parameter SI.Volume metalVol "Volume of the metal part in the tubes";
      parameter SI.Density rhom "Metal density";
      parameter SI.SpecificHeatCapacity cm "Specific heat capacity of the metal";
      //Start value
      parameter SI.Temperature Tstart "Average gas temperature start value" annotation(
        Dialog(tab = "Initialization"));
      parameter SI.CoefficientOfHeatTransfer gamma "Constant heat transfer coefficient in the gas side";
      parameter Choices.Flow1D.FFtypes FFtype_G = ThermoPower.Choices.Flow1D.FFtypes.NoFriction "Friction Factor Type, gas side";
      parameter Real Kfnom_G = 0 "Nominal hydraulic resistance coefficient, gas side";
      parameter SI.PressureDifference dpnom_G = 0 "Nominal pressure drop, gas side (friction term only!)";
      parameter SI.Density rhonom_G = 0 "Nominal inlet density, gas side";
      parameter Real Cfnom_G = 0 "Nominal Fanning friction factor, gsa side";
      parameter Boolean gasQuasiStatic = false "Quasi-static model of the flue gas (mass, energy and momentum static balances";
      constant Real pi = Modelica.Constants.pi;
      Water.DrumEquilibrium water(cm = cm, redeclare package Medium = FluidMedium, Vd = fluidVol, Mm = metalVol * rhom, pstart = fluidNomPressure, Vlstart = fluidVol * 0.8) annotation(
        Placement(transformation(extent = {{-24, 18}, {24, 66}}, rotation = 0)));
      Thermal.HT_DHTVolumes adapter(N = N - 1) annotation(
        Placement(transformation(origin = {0, -8}, extent = {{-10, -10}, {10, 10}}, rotation = 270)));
      Water.FlangeA waterIn(redeclare package Medium = FluidMedium) annotation(
        Placement(transformation(extent = {{-20, 80}, {20, 120}}, rotation = 0)));
      Water.FlangeB waterOut(redeclare package Medium = FluidMedium) annotation(
        Placement(transformation(extent = {{-20, -120}, {20, -80}}, rotation = 0)));
      Gas.FlangeA gasIn(redeclare package Medium = FlueGasMedium) annotation(
        Placement(transformation(extent = {{-120, -20}, {-80, 20}}, rotation = 0)));
      Gas.FlangeB gasOut(redeclare package Medium = FlueGasMedium) annotation(
        Placement(transformation(extent = {{80, -20}, {120, 20}}, rotation = 0)));
      Gas.Flow1DFV gasFlow(Dhyd = 1, wnom = gasNomFlowRate, FFtype = ThermoPower.Choices.Flow1D.FFtypes.NoFriction, redeclare package Medium = FlueGasMedium, QuasiStatic = gasQuasiStatic, N = N, L = L, A = gasVol / L, omega = exchSurface / L, Tstartbar = Tstart, redeclare model HeatTransfer = Thermal.HeatTransferFV.ConstantHeatTransferCoefficient(gamma = gamma)) annotation(
        Placement(transformation(origin = {0, -40}, extent = {{14, 14}, {-14, -14}}, rotation = 180)));
      Modelica.Blocks.Interfaces.RealOutput voidFraction annotation(
        Placement(transformation(extent = {{96, 50}, {116, 70}}, rotation = 0)));
      final parameter SI.Distance L = 1 "Tube length";
      Modelica.Blocks.Sources.RealExpression realExpression annotation(
        Placement(transformation(extent = {{18, 108}, {38, 128}})));
      Modelica.Blocks.Sources.RealExpression output1(y = water.Vv / water.Vd) annotation(
        Placement(transformation(extent = {{54, 52}, {86, 70}})));
    equation
      connect(water.feed, waterIn) annotation(
        Line(points = {{-21.6, 31.44}, {-52, 31.44}, {-52, 100}, {0, 100}}, thickness = 0.5, color = {0, 0, 255}));
      connect(water.steam, waterOut) annotation(
        Line(points = {{16.32, 59.28}, {40, 59.28}, {40, -70}, {0, -70}, {0, -100}}, thickness = 0.5, color = {0, 0, 255}));
      connect(gasFlow.infl, gasIn) annotation(
        Line(points = {{-14, -40}, {-60, -40}, {-60, 0}, {-100, 0}}, color = {159, 159, 223}, thickness = 0.5));
      connect(gasFlow.outfl, gasOut) annotation(
        Line(points = {{14, -40}, {60, -40}, {60, 0}, {100, 0}}, color = {159, 159, 223}, thickness = 0.5));
      connect(output1.y, voidFraction) annotation(
        Line(points = {{87.6, 61}, {96, 61}, {96, 60}, {106, 60}}, color = {0, 0, 127}));
      connect(adapter.DHT_port, gasFlow.wall) annotation(
        Line(points = {{-1.9984e-15, -19}, {-1.9984e-15, -32}, {-8.88178e-16, -32}, {-8.88178e-16, -33}}, color = {255, 127, 0}));
      connect(adapter.HT_port, water.wall) annotation(
        Line(points = {{2.19269e-15, 4}, {0, 4}, {0, 20.4}}, color = {191, 0, 0}));
      annotation(
        Icon(graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255}, fillColor = {230, 230, 230}, fillPattern = FillPattern.Solid), Line(points = {{0, -80}, {0, -40}, {40, -20}, {-40, 20}, {0, 40}, {0, 80}}, color = {0, 0, 255}, thickness = 0.5), Text(extent = {{-100, -115}, {100, -145}}, lineColor = {85, 170, 255}, textString = "%name")}));
    end Evaporator;

    model HRBPlant "Simple plant model with HRB"
    //  replaceable package GasMedium = Modelica.Media.IdealGases.MixtureGases.CombustionAir constrainedby Modelica.Media.Interfaces.PartialMedium;
    //  replaceable package WaterMedium = Modelica.Media.Water.WaterIF97_ph constrainedby Modelica.Media.Interfaces.PartialMedium;
      replaceable package GasMedium = Modelica.Media.Air.DryAirNasa constrainedby Modelica.Media.Interfaces.PartialMedium;
      parameter Modelica.SIunits.Time Ts = 4 "Temperature sensor time constant";
     ThermoPower.Examples.HRB.Models.HeatExchanger Boiler(redeclare package GasMedium = GasMedium, Nr = 10, Lt = 3, Dint = 0.01, Dext = 0.012, rhom = 7800, cm = 650, Sb = 8, Lb = 2, redeclare package WaterMedium = GasMedium, StaticGasBalances = false, Nt = 250) annotation(
        Placement(transformation(extent = {{-20, -20}, {20, 20}}, rotation = 0)));
      ThermoPower.Water.ValveLin Valve(Kv = 20 / 4e5, redeclare package Medium = GasMedium) annotation(
        Placement(transformation(extent = {{36, -50}, {56, -70}}, rotation = 0)));
      ThermoPower.Water.SinkPressure SinkP1(redeclare package Medium = GasMedium, p0 = 100000) annotation(
        Placement(transformation(extent = {{70, -70}, {90, -50}}, rotation = 0)));
      ThermoPower.Gas.SourceMassFlow SourceW2(redeclare package Medium = GasMedium, w0 = 10, use_in_w0 = true, p0 = 100000, T = 670) annotation(
        Placement(transformation(extent = {{-96, -10}, {-76, 10}}, rotation = 0)));
      ThermoPower.Gas.SinkPressure SinkP2(redeclare package Medium = GasMedium, T = 300) annotation(
        Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
      ThermoPower.Gas.PressDropLin PressDropLin1(redeclare package Medium = GasMedium, R = 1000 / 10) annotation(
        Placement(transformation(extent = {{60, -10}, {80, 10}}, rotation = 0)));
      ThermoPower.Water.SensT WaterIn(redeclare package Medium = GasMedium) annotation(
        Placement(transformation(extent = {{-40, 44}, {-20, 64}}, rotation = 0)));
      ThermoPower.Water.SensT WaterOut(redeclare package Medium = GasMedium) annotation(
        Placement(transformation(extent = {{6, -66}, {26, -46}}, rotation = 0)));
      ThermoPower.Gas.SensT GasOut(redeclare package Medium = GasMedium) annotation(
        Placement(transformation(extent = {{30, -6}, {50, 14}}, rotation = 0)));
      ThermoPower.Gas.SensT GasIn(redeclare package Medium = GasMedium) annotation(
        Placement(transformation(extent = {{-60, -6}, {-40, 14}}, rotation = 0)));
      ThermoPower.Water.SourcePressure SourceP1(redeclare package Medium = GasMedium, p0 = 500000) annotation(
        Placement(transformation(extent = {{-80, 40}, {-60, 60}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput ValveOpening annotation(
        Placement(transformation(extent = {{-170, -90}, {-150, -70}}, rotation = 0), iconTransformation(extent = {{-110, -70}, {-90, -50}})));
      Modelica.Blocks.Interfaces.RealOutput WaterOut_T annotation(
        Placement(transformation(extent = {{160, -50}, {180, -30}}, rotation = 0), iconTransformation(extent = {{94, -30}, {114, -10}})));
      Modelica.Blocks.Interfaces.RealOutput WaterIn_T annotation(
        Placement(transformation(extent = {{160, -110}, {180, -90}}, rotation = 0), iconTransformation(extent = {{94, -70}, {114, -50}})));
      Modelica.Blocks.Interfaces.RealOutput GasOut_T annotation(
        Placement(transformation(extent = {{160, 90}, {180, 110}}, rotation = 0), iconTransformation(extent = {{92, 50}, {112, 70}})));
      Modelica.Blocks.Interfaces.RealOutput GasIn_T annotation(
        Placement(transformation(extent = {{160, 30}, {180, 50}}, rotation = 0), iconTransformation(extent = {{94, 10}, {114, 30}})));
      Modelica.Blocks.Interfaces.RealInput GasFlowRate annotation(
        Placement(transformation(extent = {{-170, 70}, {-150, 90}}, rotation = 0), iconTransformation(extent = {{-110, 50}, {-90, 70}})));
      Modelica.Blocks.Continuous.FirstOrder GasFlowActuator(k = 1, T = 1, y_start = 5, initType = Modelica.Blocks.Types.Init.SteadyState) annotation(
        Placement(transformation(extent = {{-130, 70}, {-110, 90}}, rotation = 0)));
      Modelica.Blocks.Continuous.FirstOrder WaterInTSensor(k = 1, T = Ts, initType = Modelica.Blocks.Types.Init.SteadyState, y_start = 296) annotation(
        Placement(transformation(extent = {{120, -110}, {140, -90}}, rotation = 0)));
      Modelica.Blocks.Continuous.FirstOrder WaterOutTSensor(k = 1, T = Ts, initType = Modelica.Blocks.Types.Init.SteadyState, y_start = 330) annotation(
        Placement(transformation(extent = {{120, -50}, {140, -30}}, rotation = 0)));
      Modelica.Blocks.Continuous.FirstOrder GasInTSensor(k = 1, T = Ts, initType = Modelica.Blocks.Types.Init.SteadyState, y_start = 670) annotation(
        Placement(transformation(extent = {{120, 30}, {140, 50}}, rotation = 0)));
      Modelica.Blocks.Continuous.FirstOrder GasOutTSensor(k = 1, T = Ts, initType = Modelica.Blocks.Types.Init.SteadyState, y_start = 350) annotation(
        Placement(transformation(extent = {{120, 90}, {140, 110}}, rotation = 0)));
      Modelica.Blocks.Continuous.FirstOrder ValveOpeningActuator(k = 1, T = 1, initType = Modelica.Blocks.Types.Init.SteadyState, y_start = 1) annotation(
        Placement(transformation(extent = {{-130, -90}, {-110, -70}}, rotation = 0)));
      inner ThermoPower.System system(allowFlowReversal = false, initOpt = ThermoPower.Choices.Init.Options.steadyState) annotation(
        Placement(transformation(extent = {{140, 140}, {160, 160}})));
    equation
      connect(GasFlowActuator.y, SourceW2.in_w0) annotation(
        Line(points = {{-109, 80}, {-92, 80}, {-92, 5}}, color = {0, 0, 127}));
      connect(GasInTSensor.u, GasIn.T) annotation(
        Line(points = {{118, 40}, {-32, 40}, {-32, 10}, {-43, 10}}, color = {0, 0, 127}));
      connect(GasOut.T, GasOutTSensor.u) annotation(
        Line(points = {{47, 10}, {60, 10}, {60, 100}, {118, 100}}, color = {0, 0, 127}));
      connect(GasOutTSensor.y, GasOut_T) annotation(
        Line(points = {{141, 100}, {170, 100}}, color = {0, 0, 127}));
      connect(WaterIn.T, WaterInTSensor.u) annotation(
        Line(points = {{-22, 60}, {94, 60}, {94, -100}, {118, -100}}, color = {0, 0, 127}));
      connect(WaterOut.T, WaterOutTSensor.u) annotation(
        Line(points = {{24, -50}, {24, -40}, {118, -40}}, color = {0, 0, 127}));
      connect(WaterOutTSensor.y, WaterOut_T) annotation(
        Line(points = {{141, -40}, {170, -40}}, color = {0, 0, 127}));
      connect(GasInTSensor.y, GasIn_T) annotation(
        Line(points = {{141, 40}, {170, 40}}, color = {0, 0, 127}));
      connect(Valve.cmd, ValveOpeningActuator.y) annotation(
        Line(points = {{46, -68}, {46, -80}, {-109, -80}}, color = {0, 0, 127}));
      connect(WaterInTSensor.y, WaterIn_T) annotation(
        Line(points = {{141, -100}, {170, -100}}, color = {0, 0, 127}));
      connect(WaterOut.inlet, Boiler.waterOut) annotation(
        Line(points = {{10, -60}, {0, -60}, {0, -20}}, thickness = 0.5, color = {0, 0, 255}));
      connect(Boiler.gasIn, GasIn.outlet) annotation(
        Line(points = {{-20, 0}, {-44, 0}}, color = {159, 159, 223}, thickness = 0.5));
      connect(GasOut.inlet, Boiler.gasOut) annotation(
        Line(points = {{34, 0}, {20, 0}}, color = {159, 159, 223}, thickness = 0.5));
      connect(Boiler.waterIn, WaterIn.outlet) annotation(
        Line(points = {{0, 20}, {0, 50}, {-24, 50}}, thickness = 0.5, color = {0, 0, 255}));
      connect(SourceP1.flange, WaterIn.inlet) annotation(
        Line(points = {{-60, 50}, {-36, 50}}, thickness = 0.5, color = {0, 0, 255}));
      connect(WaterOut.outlet, Valve.inlet) annotation(
        Line(points = {{22, -60}, {36, -60}}, thickness = 0.5, color = {0, 0, 255}));
      connect(Valve.outlet, SinkP1.flange) annotation(
        Line(points = {{56, -60}, {70, -60}}, thickness = 0.5, color = {0, 0, 255}));
      connect(PressDropLin1.outlet, SinkP2.flange) annotation(
        Line(points = {{80, 0}, {100, 0}}, color = {159, 159, 223}, thickness = 0.5));
      connect(GasOut.outlet, PressDropLin1.inlet) annotation(
        Line(points = {{46, 0}, {60, 0}}, color = {159, 159, 223}, thickness = 0.5));
      connect(SourceW2.flange, GasIn.inlet) annotation(
        Line(points = {{-76, 0}, {-56, 0}}, color = {159, 159, 223}, thickness = 0.5));
      connect(GasFlowActuator.u, GasFlowRate) annotation(
        Line(points = {{-132, 80}, {-160, 80}}, color = {0, 0, 127}));
      connect(ValveOpeningActuator.u, ValveOpening) annotation(
        Line(points = {{-132, -80}, {-160, -80}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-160, -160}, {160, 160}}, initialScale = 0.1), graphics),
        Documentation(revisions = "<html>
<ul>
<li><i>20 Dec 2004</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>
          ", info = "<html>
Very simple plant model, providing boundary conditions to the <tt>HRB</tt> model.
</html>"),
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}, initialScale = 0.1), graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid), Text(extent = {{-72, 74}, {78, -60}}, lineColor = {0, 0, 255}, lineThickness = 0.5, textString = "P")}));
    end HRBPlant;

    model DigitalPI
      extends Modelica.Blocks.Interfaces.DiscreteBlock;
      parameter Real Kp "Gain";
      parameter Modelica.SIunits.Time Ti(min = 0) "Integral time";
      parameter Real b(min = 0) = 1 "Set-point weight (proportional action)";
      parameter Real CSmax "Control signal saturation upper bound";
      parameter Real CSmin "Control signal saturation lower bound";
      parameter Real CSstart(min = CSmin, max = CSmax) = 0 "Control signal start value";
      parameter Boolean StartSteadyState = false "True=steady state initial equations activated";
      discrete Real e "Sampled error signal";
      discrete Real e_int(start = CSstart / Kp * Ti) "Integrated error";
      discrete Real e_int_wind "Integrated error before anti-windup filtering";
      discrete Real CSwind "Control signal before anti-windup filtering";
      final parameter SI.Time Ts = samplePeriod "Sampling Time";
    public
      Modelica.Blocks.Interfaces.RealInput SP annotation(
        Placement(transformation(extent = {{-120, 40}, {-80, 80}}, rotation = 0), iconTransformation(extent = {{-120, 40}, {-80, 80}})));
      Modelica.Blocks.Interfaces.RealOutput CS annotation(
        Placement(transformation(extent = {{80, -20}, {120, 20}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput PV annotation(
        Placement(transformation(extent = {{-120, -80}, {-80, -40}}, rotation = 0)));
    equation
      when {initial(), sampleTrigger} then
        e = SP - PV;
        e_int_wind = pre(e_int) + Ts * e;
        CSwind = Kp * (e_int_wind / Ti + e);
        if CSwind > CSmax then
          CS = CSmax;
          e_int = (CS / Kp - e) * Ti;
        elseif CSwind < CSmin then
          CS = CSmin;
          e_int = (CS / Kp - e) * Ti;
        else
          CS = CSwind;
          e_int = e_int_wind;
        end if;
      end when;
    initial equation
      if StartSteadyState then
        pre(e_int) = e_int;
      end if;
      annotation(
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics = {Text(extent = {{-56, 96}, {14, 28}}, textString = "SP"), Text(extent = {{-58, -28}, {14, -98}}, textString = "PV"), Text(extent = {{70, -20}, {134, -86}}, textString = "CS")}),
        Diagram(graphics),
        Documentation(info = "<html>
This is the model of a digital PI controller, complete with auto/man and tracking functionalies.
</html>", revisions = "<html>
<ul>
<li><i>15 Sep 2004</i>
    by <a href=\"mailto:francesco.schiavo@polimi.it\">Francesco Schiavo</a>:<br>
       First release.</li>
</ul>
</html>"));
    end DigitalPI;
  end Models;

  package Simulators "Simulation models for the HRB example"
    extends Modelica.Icons.ExamplesPackage;

    model OpenLoopSimulator "Open loop plant simulator"
      extends Modelica.Icons.Example;
      Models.HRBPlant Plant(system(initOpt = ThermoPower.Choices.Init.Options.fixedState)) annotation(
        Placement(transformation(extent = {{-10, -40}, {70, 40}}, rotation = 0)));
      Modelica.Blocks.Sources.Step ValveOpening(height = -0.1, offset = 1, startTime = 100) annotation(
        Placement(transformation(extent = {{-88, -40}, {-68, -20}}, rotation = 0)));
      Modelica.Blocks.Sources.Ramp GasFlowRate(offset = 10, height = 1, duration = 0.1, startTime = 200) annotation(
        Placement(transformation(extent = {{-88, 18}, {-68, 38}}, rotation = 0)));
      Modelica.Blocks.Math.Add Add1 annotation(
        Placement(transformation(extent = {{-46, 24}, {-26, 44}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput GasFlowRateInput annotation(
        Placement(transformation(extent = {{-108, 50}, {-88, 70}}, rotation = 0), iconTransformation(extent = {{-108, 50}, {-88, 70}})));
      Modelica.Blocks.Interfaces.RealInput ValveOpeningInput annotation(
        Placement(transformation(extent = {{-108, -70}, {-88, -50}}, rotation = 0), iconTransformation(extent = {{-108, -70}, {-88, -50}})));
      Modelica.Blocks.Math.Add Add2 annotation(
        Placement(transformation(extent = {{-44, -34}, {-24, -14}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealOutput TGoutOutput annotation(
        Placement(transformation(extent = {{92, 50}, {112, 70}}, rotation = 0), iconTransformation(extent = {{92, 50}, {112, 70}})));
      Modelica.Blocks.Interfaces.RealOutput TWoutOutput annotation(
        Placement(transformation(extent = {{90, -70}, {110, -50}}, rotation = 0)));
    equation
      connect(Plant.GasOut_T, TGoutOutput) annotation(
        Line(points = {{70.8, 24}, {80, 24}, {80, 60}, {102, 60}}, color = {0, 0, 127}));
      connect(Plant.WaterOut_T, TWoutOutput) annotation(
        Line(points = {{71.6, -8}, {80, -8}, {80, -60}, {100, -60}}, color = {0, 0, 127}));
      connect(Add1.u2, GasFlowRate.y) annotation(
        Line(points = {{-48, 28}, {-67, 28}}, color = {0, 0, 127}));
      connect(Add1.u1, GasFlowRateInput) annotation(
        Line(points = {{-48, 40}, {-60, 40}, {-60, 60}, {-98, 60}}, color = {0, 0, 127}));
      connect(Plant.GasFlowRate, Add1.y) annotation(
        Line(points = {{-10, 24}, {-18, 24}, {-18, 34}, {-25, 34}}, color = {0, 0, 127}));
      connect(Plant.ValveOpening, Add2.y) annotation(
        Line(points = {{-10, -24}, {-18, -24}, {-18, -24}, {-23, -24}}, color = {0, 0, 127}));
      connect(Add2.u2, ValveOpening.y) annotation(
        Line(points = {{-46, -30}, {-60, -30}, {-67, -30}}, color = {0, 0, 127}));
      connect(Add2.u1, ValveOpeningInput) annotation(
        Line(points = {{-46, -18}, {-74, -18}, {-74, -60}, {-98, -60}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics),
        experiment(StopTime = 300, Tolerance = 1e-006),
        Documentation(revisions = "<html>
<ul>
<li><i>20 Sep 2013</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    Updated and improved models and documentation.</li>
<li><i>25 Apr 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>
          ", info = "<html>
<p>This model allows to simulate an open loop transient, using start attributes to select the initial values of the state variables. After about 50s, the plant reaches a steady state. </p>
<p>At time t =100 s, the water valve is closed by 10&percnt;. At time t = 200 s, the gas flow rate is increased by 10&percnt;.</p>
<p>The simulator is provided with external inputs to apply changes to the system input. If the system is simulated alone, these are taken to be zero by default, so the step responses can be computed. If the system is linearized at time t = 99, the A,B,C,D matrices of the linearized model around the initial steady state can be obtained.</p>
</html>"),
        __Dymola_experimentSetupOutput,
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255})}));
    end OpenLoopSimulator;

    model OpenLoopSimulatorSS "Open loop plant simulator, steady-state initialization"
      extends OpenLoopSimulator(Plant(system(initOpt = ThermoPower.Choices.Init.Options.steadyState)));
      annotation(
        Diagram(graphics),
        experiment(StopTime = 300, Tolerance = 1e-006),
        Documentation(revisions = "<html>
<ul>
<li><i>20 Sep 2013</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    Updated and improved models and documentation.</li>
<li><i>25 Apr 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>
          ", info = "<html>
<p>This model is the same as OpenLoopSimulator, except that it starts directly from a steady state. This requires the solution of a system of nonlinear equations, which might lead to some numerical problems. If the solver is successful, the first relaxation transient of OpenLoopSimulator, which has no physical meaning, is avoided. </p>
<p>At time t = 100 s, the water valve is closed by 10&percnt;. At time t = 200 s, the gas flow rate is increased by 10&percnt;. </p>
<p>The simulator is provided with external inputs to apply changes to the system input. If the system is simulated alone, these are taken to be zero by default, so the step responses can be computed. If the system is linearized at t = 0, the A,B,C,D matrices of the linearized model around the steady state can be obtained.</p>
</html>"),
        __Dymola_experimentSetupOutput);
    end OpenLoopSimulatorSS;

    model OpenLoopSimulatorHtc "Open-loop plant simulator with parameter computation"
      extends OpenLoopSimulatorSS(Plant(Boiler(gamma_nom = gamma_unknown)));
      parameter Modelica.SIunits.CoefficientOfHeatTransfer gamma_unknown(fixed = false, start = 150);
    initial equation
      Plant.GasOut.T = Modelica.SIunits.Conversions.from_degC(130);
      annotation(
        Documentation(revisions = "<html>
<ul>
<li><i>20 Sep 2013</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    Updated and improved models and documentation.</li>
<li><i>25 Apr 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>
          ", info = "<html>
<p>This example shows how to use a Modelica model to solve for some unknown parameters, given some desired system output (please look at the Modelica textual code). In this case, the nominal heat transfer coefficient <code>Plant.Boiler.gamma_nom</code> is computed in order to obtain an initial value of the gas outlet temperature equal to 130 degrees Celsius. This can be used to match the model to known design data. Note that steady-state initial conditions are required to make the computation meaningful.</p>
<p>This is performed by defining a <code>gamma_unknown</code> parameter at the top level, with a <code>fixed = false</code> attribute (meaning that its value is a unknown) and with a <code>start = 150</code> attribute to provide a reasonable initial guess for the solver. This parameter is then used to override the value of <code>Plant.Boiler.gamma_nom</code>. In order to obtain a closed initialization problem, a corresponding initial equation to set the desired value of <code>Plant.GasOut.T is added.</code> </p>
<p>The transient starts at steady state, with the desired values of the heat transfer coefficient and gas outlet temperature. At time t = 100 s, the water valve is closed by 10&percnt;. At time t = 200 s, the gas flow rate is increased by 10&percnt;. </p>
</html>"),
        experiment(StopTime = 300, Tolerance = 1e-006),
        __Dymola_experimentSetupOutput);
    end OpenLoopSimulatorHtc;

    model OpenLoopSimulatorSimplified "Open loop plant simulator with simplified fluid models"
      extends OpenLoopSimulatorSS(Plant(redeclare package WaterMedium = Modelica.Media.CompressibleLiquids.LinearWater_pT_Ambient, redeclare package GasMedium = Modelica.Media.IdealGases.MixtureGases.CombustionAir(fixedX = true)));
      annotation(
        experiment(StopTime = 300, Tolerance = 1e-006),
        Documentation(info = "<html>
<p>This model extends <code>OpenLoopSimulatorSS</code>, with some modifiers to obtain a simplified version: the water medium model is replaced by a simpler one, the gas medium is assumed at fixed composition, and static balances are assumed for the gas side. As a result, the simulation is much faster.</p>
</html>", revisions = "<html>
<ul>
<li><i>20 Sep 2013</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    Updated and improved models and documentation.</li>
<li><i>25 Apr 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>
          "),
        __Dymola_experimentSetupOutput);
    end OpenLoopSimulatorSimplified;

    model ClosedLoopSimulator "Plant simulation with analogue temperature controller"
      extends Modelica.Icons.Example;
      Models.HRBPlant Plant(Boiler(GasSide(initOpt = ThermoPower.Choices.Init.Options.steadyState), WaterSide(initOpt = ThermoPower.Choices.Init.Options.steadyState), TubeWalls(initOpt = ThermoPower.Choices.Init.Options.steadyState))) annotation(
        Placement(transformation(extent = {{26, -32}, {76, 20}}, rotation = 0)));
      Modelica.Blocks.Sources.Step ValveOpening(offset = 1, startTime = 50, height = -0.1) annotation(
        Placement(transformation(extent = {{-20, -32}, {0, -12}}, rotation = 0)));
      Modelica.Blocks.Continuous.PI TempController(initType = Modelica.Blocks.Types.Init.SteadyState, k = 0.4, T = 20) annotation(
        Placement(transformation(extent = {{-20, 0}, {0, 20}}, rotation = 0)));
      Modelica.Blocks.Math.Feedback Feedback1 annotation(
        Placement(transformation(extent = {{-50, 20}, {-30, 0}}, rotation = 0)));
      Modelica.Blocks.Sources.Step TWOutSetPoint(offset = 330, height = 10, startTime = 200) annotation(
        Placement(transformation(extent = {{-80, 0}, {-60, 20}}, rotation = 0)));
    equation
      connect(ValveOpening.y, Plant.ValveOpening) annotation(
        Line(points = {{1, -22}, {26, -22}, {26, -21.6}}, color = {0, 0, 127}));
      connect(TempController.y, Plant.GasFlowRate) annotation(
        Line(points = {{1, 10}, {26, 10}, {26, 9.6}}, color = {0, 0, 127}));
      connect(Feedback1.y, TempController.u) annotation(
        Line(points = {{-31, 10}, {-22, 10}}, color = {0, 0, 127}));
      connect(Plant.WaterOut_T, Feedback1.u2) annotation(
        Line(points = {{77, -11.2}, {94, -11.2}, {94, 40}, {-40, 40}, {-40, 18}}, color = {0, 0, 127}));
      connect(TWOutSetPoint.y, Feedback1.u1) annotation(
        Line(points = {{-59, 10}, {-48, 10}}, color = {0, 0, 127}));
      annotation(
        Diagram(graphics),
        experiment(StopTime = 400, StartTime = 0, Tolerance = 1e-06, Interval = 0.8),
        Documentation(revisions = "<html>
<ul>
<li><i>20 Sep 2013</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    Updated and improved models and documentation.</li>
<li><i>25 Apr 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>
          ", info = "<html>
<p>This model simulates a simple continuous-time control system for the HRB. The water outlet temperature is controlled to the set point by a PI controller acting on the gas flow rate, rejecting the disturbances due to the changing water flow rate. </p>
<p>The system starts at steady state; at t = 50 s, the water flow rate is reduced by 10&percnt;; at t = 200 s, the water temperature set point is increased by 10 K. </p>
</html>"),
        __Dymola_experimentSetupOutput);
    end ClosedLoopSimulator;

    model ClosedLoopDigitalSimulator "Plant simulation with digital temperature controller"
      extends Modelica.Icons.Example;
      Models.HRBPlant Plant(Boiler(GasSide(initOpt = ThermoPower.Choices.Init.Options.steadyState), WaterSide(initOpt = ThermoPower.Choices.Init.Options.steadyState), TubeWalls(initOpt = ThermoPower.Choices.Init.Options.steadyState))) annotation(
        Placement(transformation(extent = {{10, -30}, {60, 20}}, rotation = 0)));
      Modelica.Blocks.Sources.Step ValveOpening(height = -0.1, offset = 1, startTime = 50) annotation(
        Placement(transformation(extent = {{-36, -46}, {-16, -26}}, rotation = 0)));
      Modelica.Blocks.Sources.Step TWOutSetPoint(offset = 330, height = 10, startTime = 200) annotation(
        Placement(transformation(extent = {{-76, -6}, {-56, 14}}, rotation = 0)));
      Models.DigitalPI DigitalPI1(CSmin = 5, CSstart = 6.2, StartSteadyState = true, Kp = 0.4, Ti = 20, CSmax = 15, samplePeriod = 3) annotation(
        Placement(transformation(extent = {{-36, 20}, {-16, 0}}, rotation = 0)));
      inner System system annotation(
        Placement(transformation(extent = {{80, 80}, {100, 100}})));
    equation
      connect(ValveOpening.y, Plant.ValveOpening) annotation(
        Line(points = {{-15, -36}, {-2, -36}, {-2, -20}, {10, -20}}, color = {0, 0, 127}));
      connect(TWOutSetPoint.y, DigitalPI1.SP) annotation(
        Line(points = {{-55, 4}, {-36, 4}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(DigitalPI1.CS, Plant.GasFlowRate) annotation(
        Line(points = {{-16, 10}, {10, 10}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(Plant.WaterOut_T, DigitalPI1.PV) annotation(
        Line(points = {{61, -10}, {94, -10}, {94, 40}, {-48, 40}, {-48, 16}, {-36, 16}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(
        Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics),
        experiment(StopTime = 400, Tolerance = 1e-006, __Dymola_Algorithm = "Dassl"),
        Documentation(revisions = "<html>
<ul>
<li><i>20 Sep 2013</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    Updated and improved models and documentation.</li>
<li><i>25 Apr 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>
          ", info = "<html>
<p>This model simulates the same scenario as ClosedLoopSimulator, using a digital PI controller with a sample time of 2 s.</p>
</html>"),
        __Dymola_experimentSetupOutput);
    end ClosedLoopDigitalSimulator;

    model ClosedLoopDigitalSimulatorSimplified "Plant simulation with digital temperature controller and simplified fluid models"
      extends ClosedLoopDigitalSimulator(Plant(redeclare package WaterMedium = Modelica.Media.CompressibleLiquids.LinearWater_pT_Ambient, redeclare package GasMedium = Modelica.Media.IdealGases.MixtureGases.CombustionAir(fixedX = true)));
      //redeclare package WaterMedium = Media.LiquidWaterConstant,
      annotation(
        experiment(StopTime = 300, Tolerance = 1e-006, __Dymola_Algorithm = "Dassl"),
        Documentation(info = "<html>
<p>This model is the same as ClosedLoopDigitalSimulator, using the simplified process model. The simulation speed is approximately three times faster than in the case of the full model.</p>
</html>", revisions = "<html>
<ul>
<li><i>20 Sep 2013</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    Updated and improved models and documentation.</li>
<li><i>25 Apr 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
    First release.</li>
</ul>
</html>
          "),
        __Dymola_experimentSetupOutput);
    end ClosedLoopDigitalSimulatorSimplified;

    model TestPI "Test model for digital PI controller"
      extends Modelica.Icons.Example;
      ThermoPower.Examples.HRB.Models.DigitalPI digitalPI(Kp = 4, Ti = 8, CSmax = 1, CSmin = -1, samplePeriod = 1) annotation(
        Placement(transformation(extent = {{-20, 0}, {0, 20}})));
      Modelica.Blocks.Continuous.Integrator integrator(k = 0.1) annotation(
        Placement(transformation(extent = {{40, 0}, {60, 20}})));
      Modelica.Blocks.Sources.TimeTable timeTable(table = [0, 0; 1, 0; 1, 1; 40, 1; 40, 1.2; 80, 1.2; 80, 0; 200.0, 0.0]) annotation(
        Placement(transformation(extent = {{-76, 6}, {-56, 26}})));
    equation
      connect(digitalPI.CS, integrator.u) annotation(
        Line(points = {{0, 10}, {38, 10}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(integrator.y, digitalPI.PV) annotation(
        Line(points = {{61, 10}, {80, 10}, {80, -22}, {-32, -22}, {-32, 4}, {-20, 4}}, color = {0, 0, 127}, smooth = Smooth.None));
      connect(timeTable.y, digitalPI.SP) annotation(
        Line(points = {{-55, 16}, {-20, 16}}, color = {0, 0, 127}, smooth = Smooth.None));
      annotation(
        Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics),
        experiment(StopTime = 120),
        __Dymola_experimentSetupOutput);
    end TestPI;
  end Simulators;
  annotation(
    Documentation(revisions = "<html>
<ul>
<li><i>26 Apr 2005</i>
    by <a href=\"mailto:francesco.casella@polimi.it\">Francesco
Casella</a>:<br>
       First release.</li>
</ul>
</html>", info = "<html>
This package contains models of a simple Heat Recovery Boiler. Different simulation models are provided, demonstrating how to initialise and run open-loop as well as closed loop simulations.
</html>"));
end HRB;
